<?xml version="1.0" encoding="UTF-8"?>
<app:NexusBase 
	width="100%" height="100%" layout="absolute" horizontalCenter="0" backgroundColor="black" horizontalScrollPolicy="off" verticalScrollPolicy="off" 
	creationComplete="onCreationComplete();"
	implements="uk.co.dubit.properties.IPropertiesListener"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:app="uk.co.dubit.platform.app.*" 
	xmlns:skin="uk.co.dubit.platform.components.skin.*" 
	xmlns:ui="uk.co.dubit.platform.components.rooms.ui.*" 
	xmlns:backpack="uk.co.dubit.platform.components.backpack.*" 
	xmlns:quest="uk.co.dubit.platform.components.quest.*"
	xmlns:dialogue="uk.co.dubit.platform.components.dialogue.*" 
	xmlns:experience="uk.co.dubit.platform.components.experience.*" 
	xmlns:skills="uk.co.dubit.platform.components.skills.*"
	xmlns:verb="uk.co.dubit.platform.components.verb.*" xmlns:editor="uk.co.dubit.platform.components.editor.*" xmlns:chat="uk.co.dubit.platform.components.chat.*" xmlns:video="uk.co.dubit.platform.components.video.*" xmlns:minigame="uk.co.dubit.platform.components.minigame.*" xmlns:growl="uk.co.dubit.platform.components.growl.*">
	
	<mx:Style source="style/style.css"/>
	
	<mx:Script>
		<![CDATA[
			import uk.co.dubit.platform.components.experience.Experience;
			import com.dubitplatform.views.game.CartoonChatBubble;
			import uk.co.dubit.graphics.render2D.types.ChatBubble2D;
			import uk.co.dubit.platform.components.backpack.Backpack;
			import uk.co.dubit.platform.components.quest.QuestModel;
			import com.dubitplatform.views.MapTitleWindow;
			import uk.co.dubit.utils.StringUtils;
			import com.adobe.utils.StringUtil;
			import uk.co.dubit.properties.Properties;
			import com.dubitplatform.views.ChatView;
			import com.dubitplatform.views.ProfileSkinTitleWindow;
			import com.dubitplatform.views.ChatRoomView;
			import com.dubitplatform.views.ContextMenuSkin;
			import uk.co.dubit.sound.SoundManager;
			import com.dubitplatform.views.ShopTitleWindow;
			import com.dubitplatform.views.MinigameTitleWindow;
			import uk.co.dubit.platform.components.minigame.Minigame;
			import com.dubitplatform.views.MinigameSkin;
			import com.dubitplatform.views.GrowlView;
			import uk.co.dubit.platform.components.catalogue.Shops;
			import com.dubitplatform.views.ChatRoomPreloaderView;
			import com.dubitplatform.views.CollectionView;
			import com.dubitplatform.views.CollectionsPanel;
			import com.dubitplatform.views.AchievementsView;
			import com.dubitplatform.views.VerbControllerView;
			import com.dubitplatform.views.SkillsView;
			import com.dubitplatform.views.ExperienceView;
			import uk.co.dubit.logging.LoggingPanel;
			import uk.co.dubit.logging.LoggingPopUp;
			import com.dubitplatform.views.RoomListView;
			
			import mx.managers.PopUpManager;
			import com.dubitplatform.views.ControlPanel;
			import com.dubitplatform.views.QuestsView;
			import com.dubitplatform.views.BackpackView;
			import com.dubitplatform.views.BranchingConversationView;
			
			private var skillsView : SkillsView;
			private var questsView : QuestsView;
			private var controlPanel : ControlPanel;
			private var collectionsPanel : CollectionsPanel;
			private var backpackView : BackpackView;
			private var roomListView : RoomListView;
			private var loggingPanel : LoggingPanel;
			private var experienceView : ExperienceView;
			private var colletionView : CollectionView;
			private var achievementView : AchievementsView;
			private var verbControllerView : VerbControllerView;
			private var chatRoomPreloaderView : ChatRoomPreloaderView;
			private var branchingConversationView : BranchingConversationView;
			private var growlView:GrowlView
			private var minigameView:MinigameTitleWindow; 
			private var shopTitleView:ShopTitleWindow;
			private var contextMenuSkin:ContextMenuSkin;
			private var chatRoomSkin:ChatRoomView;
			private var chatView:ChatView
			private var profileSkinTitleWindow:ProfileSkinTitleWindow;
			private var chatBubble : CartoonChatBubble;
			

			private var map : MapTitleWindow;
					
			private function onCreationComplete () : void
			{
				controlPanel = PopUpManager.createPopUp(this, ControlPanel) as ControlPanel;
				controlPanel.filters = [new DropShadowFilter(0, 0, 0, 0.7, 40, 40, 1, 3)];
				controlPanel.visible = false;	
				
				roomBackground.filters = [new DropShadowFilter(0, 0, 0, 0.7, 40, 40, 1, 3)];
				
				loggingPanel = PopUpManager.createPopUp(this, LoggingPanel) as LoggingPanel;
				loggingPanel.filters = [new DropShadowFilter(0, 0, 0, 0.7, 40, 40, 1, 3)];
				loggingPanel.visible = false;
				
				collectionsPanel = PopUpManager.createPopUp(this, CollectionsPanel) as CollectionsPanel;
				collectionsPanel.filters = [new DropShadowFilter(0, 0, 0, 0.7, 40, 40, 1, 3)];
				collectionsPanel.visible = false;
				
				map = PopUpManager.createPopUp(this, MapTitleWindow) as MapTitleWindow;
				PopUpManager.centerPopUp(map);
				map.visible = false;
				
				Properties.getInstance().addListener(this);
			}
			
			public function onPropertyChange (property : String, oldValue : *, newValue : *) : void
			{
				if (StringUtils.equals("scene-viewportHeight", property, true))
				{
					roomBackground.height = newValue;
					chatRoomSkinContainer.height = newValue;
					videoContainer.height = newValue;
					chatRoomPreloaderContainer.height = newValue;
					chatSkinContainer.y = newValue + chatRoomSkinContainer.y + 10// verbSkinContainer.height;
					//verbSkinContainer.y = newValue + chatRoomSkinContainer.y - verbSkinContainer.height;
					dialogueSkinContainer.height = newValue;  
				}
				if (StringUtils.equals("scene-viewportWidth", property, true))
				{
					roomBackground.width = newValue;
					chatRoomSkinContainer.width = newValue;
					videoContainer.width = newValue;
					chatSkinContainer.width = newValue;
					//verbSkinContainer.width = newValue;
					chatRoomPreloaderContainer.width = newValue; 
					bar.width = newValue;
					dialogueSkinContainer.width = newValue;
				}				
			}
			
            public function openControlPanel (view : String = null) : void
            {            	
            	if (!controlPanel.visible) PopUpManager.centerPopUp(controlPanel);
            	PopUpManager.bringToFront(controlPanel);
            	controlPanel.view = view;
            	controlPanel.visible = true;
            }	
            
            public function openDebugPanel () : void
            {            	
             	if (!loggingPanel.visible) PopUpManager.centerPopUp(loggingPanel);
             	PopUpManager.bringToFront(loggingPanel);
            	loggingPanel.visible = true;           	 
            }
            
            public function openCollectionsPanel () : void
            {            	
             	if (!collectionsPanel.visible) PopUpManager.centerPopUp(collectionsPanel);
             	PopUpManager.bringToFront(collectionsPanel);
            	collectionsPanel.visible = true;           	 
            }	
            
            private function openShop() : void
            {
            	Shops.getInstance().getShopByID("default").open();
            }      
            
            private function openMap () : void
            {
            	map.visible = !map.visible;
            }      		
		]]>
	</mx:Script>	

	<mx:Resize duration="500" id="resizeEffect"/>

	<mx:Fade duration="500" id="fadeInEffect" alphaFrom="0" alphaTo="1"/>
	<mx:Fade duration="1000" id="fadeOutEffect" alphaFrom="1" alphaTo="0" startDelay="1000"/>

	<mx:Canvas width="100%" height="100%" verticalScrollPolicy="off">
		<mx:Box id="roomBackground"  width="850" height="445" horizontalCenter="0" y="100" backgroundColor="black"/>
		<ui:ChatRoomSkinContainer id="chatRoomSkinContainer" width="850" height="445" y="100" horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalCenter="0" resizeEffect="resizeEffect"/>
		
		<chat:ChatSkinContainer id="chatSkinContainer" width="850" height="30" y="515" horizontalCenter="0" resizeEffect="resizeEffect"/>			
		<verb:VerbSkinContainer id="verbSkinContainer" width="850" height="30" y="470" horizontalCenter="0" resizeEffect="resizeEffect"/>	
		
		<video:VideosSkinContainer id="videoContainer" outEffect="{fadeOutEffect}" width="850" height="445" horizontalCenter="0" y="100"/>
		
		<ui:ChatRoomPreloaderSkinContainer id="chatRoomPreloaderContainer" width="850" height="445" y="100" mouseEnabled="false" horizontalCenter="0" resizeEffect="resizeEffect"/>
		
		<minigame:MinigameSkinContainer width="850" height="445" y="100" mouseEnabled="false" horizontalCenter="0" resizeEffect="resizeEffect"/>
		
		<growl:GrowlSkinContainer width="850" height="445" y="100" mouseEnabled="false" horizontalCenter="0" resizeEffect="resizeEffect"/>
		
		<mx:ControlBar id="bar" width="850" horizontalCenter="0" y="60" height="30" paddingLeft="5" resizeEffect="resizeEffect">
			<mx:LinkButton label="Quests ({QuestModel.getInstance().activeQuestCount})" click="openControlPanel('quests');"/>
			<mx:LinkButton label="Inventory ({Backpack.getInstance().count})" click="openControlPanel('inventory');"/>
			<mx:Spacer width="100%"/>
			<mx:Label text="{Experience.getInstance().currentLevel.name}({Experience.getInstance().points}/{Experience.getInstance().nextLevel.points})"/>
		</mx:ControlBar>	
		
		<dialogue:DialogueSkinContainer id="dialogueSkinContainer" outEffect="{fadeOutEffect}" inEffect="{fadeInEffect}" horizontalCenter="0" width="850" height="445" y="100"/>				
	</mx:Canvas>
		
</app:NexusBase>